>> HANDLE EXPANSION IF UNCLOSED QUOTE
- add expansion flag
- i = (ft_strchr_index(buf, '$')
- if (i == -1)
    return (0);
- (*token)->value = ft_strjoin_memory((*token)->value, ft_strdup(buf + i));
handle_expansion(token, buf, i, 0);
return (1);

                07/07
OK - unclosed quote : parse nl ? (include in token ?)
OK - pb with make re : make: *** No rule to make target `objs', needed by `objs/clear.o'.
>> do check quoted type
>> handle exit code expansion
>> THEN parse : create commands, handle redirections, clean null tokens

                05/07
- handle var EXPANSION
    >> expand value - OK
    >> exit code <<

- handle unclosed quotes >> pb if multiple quotes (doesn't always give prompt back)
ex : "hello my name is" lorene" - OK
- check type for quoted strings
- protect mallocs !

                04/07
- started quote handling

                01/07
- FINISH LEXER
> handle var expansion
> handle quotes in tokens (if in quotes = 1 token)
>> specify each redirection type i token->type ?? 

                30/06
- ORDER PB : ///888 >> first / not tokenized
hellÃ§; ;dpilkhdl)='= 
>> hell & scnd ; not tokenized
_ PROTECT ALL MALLOC : ft_substr & others

                28/06
- null token gets added at end of the list >> CHECK WHEN
- 7649832] : anything directly before specchar (no spaces) >> ok (order changed in lexer)

                27/06
- check lexer
- check linked lists - OK >> test clear
- handle non ascii values >> check if tokenize char/char or bulk by bulk
- PB WITH DATA->tokens
HANDLE TOKENS >> valgrind pb

TO DO

- ENV VARIABLE EXPANSION :
> traverse the linked list of tokens.
> For each token starting with $, replace it with the corresponding environment variable value BEFORE TOKENIZING

- PARSING:
> Create a linked list of command nodes
> For each token, determine if it is an argument, a redirection, or a pipe
> Construct command nodes accordingly and link them together

LEXER
- [ ] handle non ascii values
- [ ] handle comments
- [ ] checks

LOOP
- [ ] handle errors & exit codes
- [ ] add exec
- [ ] handle signals