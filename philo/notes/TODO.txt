                08/05
- structs init done
>> USE MUTEX LOCK WHEN WRITING
- started monitoring
- threads created
- steps done : DO ACTIONS
TO DO :
>> monitor : handle exits (meals eaten & death)
>> actions : test & correct
>> init_threads : check usleep + monitor death with timestamp
(if (current_time - last_meal) > death_time ; then philo dead)
(check in main or in threads?)

                06/05
- struct draft created

                03/05
- checks done
- do PARSING : populate 2 structs
- wath tutos & learn about threads



                QUESTIONS
- [ ] CHECK WHAT HAPPENS IF ONLY 1 PHILO
- [x] What to do if philo dies ? >> "simulation stops"
- [ ] check all arg limits


                FUNCTIONS
INIT
- [x] PARSE ARGS
- [x] INIT PHILOS
- [x] INIT_MUTEXES
- [x] GET_TIME

MONITOR
- [ ] MONITOR PHILO DEATH
- [x] WAIT FOR THREADS
- [x] DESTROY MUTEXES
- [ ] TIMESTAMP

ACTIONS
- [x] CREATE THREADS
- [ ] PHILO EATS (>> take_fork())
- [ ] PHILO SLEEPS
- [ ] PHILO THINKS
- [Â ] PRINT ACTION



// all in ms :

// number_of_philosophers 
// time_to_die
// time_to_eat 
// time_to_sleep

// optional : number_of_times_each_philosopher_must_eat
 



1 thread / philo
1 fork / philo
1 mutex / fork (used to check/change fork value)
1 mutex to prevent that philo dies & starts eating simultaneously 