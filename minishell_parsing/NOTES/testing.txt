static void lexer_tester(t_token *token) //TEST
{
    t_token *curr;
    t_token *next;
    
    curr = token;
    while (curr)
    {
        next = curr->next;
        printf("token value : %s\ntoken type : %d\n", curr->value, curr->type); //TEST
        curr = next;
    }
    exit(0);
}

lexer_tester(data); //TEST

IN LEXER :    printf("i = %d\nt_value = %s\nt_type = %d\n\n", i, token->value, token->type);


//BS
   // int j;
    i = 0;
    // j = 0;
    // i = ft_strchr_index(tmp, '$');
    // if (i != -1)
    // {
    //     (*token)->value = ft_strjoin_memory((*token)->value, ft_substr(tmp, 0, i)); //handle input before expansion
    //     j = handle_expansion(token, tmp, i, &j);
    //     if (tmp[i + j + 1]) // handle input after exp
    //         (*token)->value = ft_strjoin_memory((*token)->value, ft_substr(tmp, j + 1, ft_strlen(tmp) - j));
    //     printf("%s\n", ft_substr(tmp, j + 1, ft_strlen(tmp) - j));
    // }
    // else
    //     (*token)->value = ft_strjoin_memory((*token)->value, tmp);